{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Pre-trained BERT contextualized word embeddings","provenance":[{"file_id":"1RhmL0BqNe52FEbdSyLpkfVuCZxE7b5ke","timestamp":1652383384257}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"metadata":{"id":"eot6_cHkIxHu","outputId":"b91ef47d-979f-4b07-f0d9-7afc5f400ece","executionInfo":{"status":"ok","timestamp":1652383562494,"user_tz":300,"elapsed":1276,"user":{"displayName":"Angie F","userId":"13982524409666626931"}},"colab":{"base_uri":"https://localhost:8080/"}},"cell_type":"code","source":["!rm -rf bert\n","!git clone https://github.com/google-research/bert"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'bert'...\n","remote: Enumerating objects: 340, done.\u001b[K\n","remote: Total 340 (delta 0), reused 0 (delta 0), pack-reused 340\u001b[K\n","Receiving objects: 100% (340/340), 328.28 KiB | 4.32 MiB/s, done.\n","Resolving deltas: 100% (182/182), done.\n"]}]},{"metadata":{"id":"plr13kC_IAoV","executionInfo":{"status":"ok","timestamp":1652383767921,"user_tz":300,"elapsed":132,"user":{"displayName":"Angie F","userId":"13982524409666626931"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e0eb307f-2d9c-4472-d063-1561c51943d7"},"cell_type":"code","source":["import sys\n","\n","sys.path.append('bert/')\n","\n","from __future__ import absolute_import\n","from __future__ import division\n","from __future__ import print_function\n","\n","import codecs\n","import collections\n","import json\n","import re\n","import os\n","import pprint\n","import numpy as np\n","import tensorflow.compat.v1 as tf\n","tf.disable_v2_behavior()\n","\n","import modeling\n","import tokenization"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/compat/v2_compat.py:107: disable_resource_variables (from tensorflow.python.ops.variable_scope) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","non-resource variables are not supported in the long term\n"]}]},{"metadata":{"id":"cOt0hGU_vbEd","outputId":"7f7f4b65-77fd-484d-c8bb-de14aa8b6ef5","executionInfo":{"status":"error","timestamp":1652383769704,"user_tz":300,"elapsed":470,"user":{"displayName":"Angie F","userId":"13982524409666626931"}},"colab":{"base_uri":"https://localhost:8080/","height":460}},"cell_type":"code","source":["assert 'COLAB_TPU_ADDR' in os.environ, 'ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!'\n","TPU_ADDRESS = 'grpc://' + os.environ['COLAB_TPU_ADDR']\n","print('TPU address is', TPU_ADDRESS)\n","\n","from google.colab import auth\n","auth.authenticate_user()\n","with tf.Session(TPU_ADDRESS) as session:\n","  print('TPU devices:')\n","  pprint.pprint(session.list_devices())\n","\n","  # Upload credentials to TPU.\n","  with open('/content/adc.json', 'r') as f:\n","    auth_info = json.load(f)\n","  tf.contrib.cloud.configure_gcs(session, credentials=auth_info)\n","  # Now credentials are set for all future sessions on this TPU."],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["TPU address is grpc://10.62.167.146:8470\n","TPU devices:\n","[_DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:CPU:0, CPU, -1, 2365769762186152218),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 8589934592, -3082809239421496445),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:0, TPU, 17179869184, 1313175408706493827),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:1, TPU, 17179869184, -2537545401362190572),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:2, TPU, 17179869184, -5939187365393010911),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:3, TPU, 17179869184, -5015695098606238394),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:4, TPU, 17179869184, 8609136809676711098),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:5, TPU, 17179869184, 8451179153579551749),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:6, TPU, 17179869184, -2174496685607405089),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:7, TPU, 17179869184, -2093725686102384723),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 17179869184, -3738614586677367766)]\n"]},{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-9a5be253d9dc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;31m# Upload credentials to TPU.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m   \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/adc.json'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     \u001b[0mauth_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcloud\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfigure_gcs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcredentials\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mauth_info\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/adc.json'"]}]},{"metadata":{"id":"0nqW7nJWhdad","executionInfo":{"status":"ok","timestamp":1652383619956,"user_tz":300,"elapsed":3649,"user":{"displayName":"Angie F","userId":"13982524409666626931"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3cc1a691-dc49-4ba5-94a1-fdee18de8d54"},"cell_type":"code","source":["# Available pretrained model checkpoints:\n","#   uncased_L-12_H-768_A-12: uncased BERT base model\n","#   uncased_L-24_H-1024_A-16: uncased BERT large model\n","#   cased_L-12_H-768_A-12: cased BERT large model\n","BERT_MODEL = 'uncased_L-12_H-768_A-12' #@param {type:\"string\"}\n","BERT_PRETRAINED_DIR = 'gs://cloud-tpu-checkpoints/bert/' + BERT_MODEL\n","print('***** BERT pretrained directory: {} *****'.format(BERT_PRETRAINED_DIR))\n","!gsutil ls $BERT_PRETRAINED_DIR"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["***** BERT pretrained directory: gs://cloud-tpu-checkpoints/bert/uncased_L-12_H-768_A-12 *****\n","gs://cloud-tpu-checkpoints/bert/uncased_L-12_H-768_A-12/bert_config.json\n","gs://cloud-tpu-checkpoints/bert/uncased_L-12_H-768_A-12/bert_model.ckpt.data-00000-of-00001\n","gs://cloud-tpu-checkpoints/bert/uncased_L-12_H-768_A-12/bert_model.ckpt.index\n","gs://cloud-tpu-checkpoints/bert/uncased_L-12_H-768_A-12/bert_model.ckpt.meta\n","gs://cloud-tpu-checkpoints/bert/uncased_L-12_H-768_A-12/checkpoint\n","gs://cloud-tpu-checkpoints/bert/uncased_L-12_H-768_A-12/vocab.txt\n"]}]},{"metadata":{"id":"3oLGerwRKCe_","executionInfo":{"status":"ok","timestamp":1652383622920,"user_tz":300,"elapsed":174,"user":{"displayName":"Angie F","userId":"13982524409666626931"}}},"cell_type":"code","source":["LAYERS = [-1,-2,-3,-4]\n","NUM_TPU_CORES = 8\n","MAX_SEQ_LENGTH = 87\n","BERT_CONFIG = BERT_PRETRAINED_DIR + '/bert_config.json'\n","CHKPT_DIR = BERT_PRETRAINED_DIR + '/bert_model.ckpt'\n","VOCAB_FILE = BERT_PRETRAINED_DIR + '/vocab.txt'\n","INIT_CHECKPOINT = BERT_PRETRAINED_DIR + '/bert_model.ckpt'\n","BATCH_SIZE = 128"],"execution_count":5,"outputs":[]},{"metadata":{"id":"3z5cIOXpHDUL","executionInfo":{"status":"ok","timestamp":1652383623998,"user_tz":300,"elapsed":146,"user":{"displayName":"Angie F","userId":"13982524409666626931"}}},"cell_type":"code","source":["class InputExample(object):\n","\n","  def __init__(self, unique_id, text_a, text_b=None):\n","    self.unique_id = unique_id\n","    self.text_a = text_a\n","    self.text_b = text_b\n"],"execution_count":6,"outputs":[]},{"metadata":{"id":"z2rw4F53H7A-","executionInfo":{"status":"ok","timestamp":1652383625801,"user_tz":300,"elapsed":192,"user":{"displayName":"Angie F","userId":"13982524409666626931"}}},"cell_type":"code","source":["class InputFeatures(object):\n","  \"\"\"A single set of features of data.\"\"\"\n","\n","  def __init__(self, unique_id, tokens, input_ids, input_mask, input_type_ids):\n","    self.unique_id = unique_id\n","    self.tokens = tokens\n","    self.input_ids = input_ids\n","    self.input_mask = input_mask\n","    self.input_type_ids = input_type_ids"],"execution_count":7,"outputs":[]},{"metadata":{"id":"jkYivQahH7uZ","executionInfo":{"status":"ok","timestamp":1652383627126,"user_tz":300,"elapsed":127,"user":{"displayName":"Angie F","userId":"13982524409666626931"}}},"cell_type":"code","source":["def input_fn_builder(features, seq_length):\n","  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n","\n","  all_unique_ids = []\n","  all_input_ids = []\n","  all_input_mask = []\n","  all_input_type_ids = []\n","\n","  for feature in features:\n","    all_unique_ids.append(feature.unique_id)\n","    all_input_ids.append(feature.input_ids)\n","    all_input_mask.append(feature.input_mask)\n","    all_input_type_ids.append(feature.input_type_ids)\n","\n","  def input_fn(params):\n","    \"\"\"The actual input function.\"\"\"\n","    batch_size = params[\"batch_size\"]\n","\n","    num_examples = len(features)\n","\n","    # This is for demo purposes and does NOT scale to large data sets. We do\n","    # not use Dataset.from_generator() because that uses tf.py_func which is\n","    # not TPU compatible. The right way to load data is with TFRecordReader.\n","    d = tf.data.Dataset.from_tensor_slices({\n","        \"unique_ids\":\n","            tf.constant(all_unique_ids, shape=[num_examples], dtype=tf.int32),\n","        \"input_ids\":\n","            tf.constant(\n","                all_input_ids, shape=[num_examples, seq_length],\n","                dtype=tf.int32),\n","        \"input_mask\":\n","            tf.constant(\n","                all_input_mask,\n","                shape=[num_examples, seq_length],\n","                dtype=tf.int32),\n","        \"input_type_ids\":\n","            tf.constant(\n","                all_input_type_ids,\n","                shape=[num_examples, seq_length],\n","                dtype=tf.int32),\n","    })\n","\n","    d = d.batch(batch_size=batch_size, drop_remainder=False)\n","    return d\n","\n","  return input_fn"],"execution_count":8,"outputs":[]},{"metadata":{"id":"sitEUE6yJWxO","executionInfo":{"status":"ok","timestamp":1652383629523,"user_tz":300,"elapsed":114,"user":{"displayName":"Angie F","userId":"13982524409666626931"}}},"cell_type":"code","source":["def model_fn_builder(bert_config, init_checkpoint, layer_indexes, use_tpu,\n","                     use_one_hot_embeddings):\n","  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n","\n","  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n","    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n","\n","    unique_ids = features[\"unique_ids\"]\n","    input_ids = features[\"input_ids\"]\n","    input_mask = features[\"input_mask\"]\n","    input_type_ids = features[\"input_type_ids\"]\n","\n","    model = modeling.BertModel(\n","        config=bert_config,\n","        is_training=False,\n","        input_ids=input_ids,\n","        input_mask=input_mask,\n","        token_type_ids=input_type_ids,\n","        use_one_hot_embeddings=use_one_hot_embeddings)\n","\n","    if mode != tf.estimator.ModeKeys.PREDICT:\n","      raise ValueError(\"Only PREDICT modes are supported: %s\" % (mode))\n","\n","    tvars = tf.trainable_variables()\n","    scaffold_fn = None\n","    (assignment_map,\n","     initialized_variable_names) = modeling.get_assignment_map_from_checkpoint(\n","         tvars, init_checkpoint)\n","    if use_tpu:\n","\n","      def tpu_scaffold():\n","        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n","        return tf.train.Scaffold()\n","\n","      scaffold_fn = tpu_scaffold\n","    else:\n","      tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n","\n","    tf.logging.info(\"**** Trainable Variables ****\")\n","    for var in tvars:\n","      init_string = \"\"\n","      if var.name in initialized_variable_names:\n","        init_string = \", *INIT_FROM_CKPT*\"\n","      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n","                      init_string)\n","\n","    all_layers = model.get_all_encoder_layers()\n","\n","    predictions = {\n","        \"unique_id\": unique_ids,\n","    }\n","\n","    for (i, layer_index) in enumerate(layer_indexes):\n","      predictions[\"layer_output_%d\" % i] = all_layers[layer_index]\n","\n","    output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n","        mode=mode, predictions=predictions, scaffold_fn=scaffold_fn)\n","    return output_spec\n","\n","  return model_fn"],"execution_count":9,"outputs":[]},{"metadata":{"id":"m7uS21ZTJYTT","executionInfo":{"status":"ok","timestamp":1652383631805,"user_tz":300,"elapsed":138,"user":{"displayName":"Angie F","userId":"13982524409666626931"}}},"cell_type":"code","source":["def convert_examples_to_features(examples, seq_length, tokenizer):\n","  \"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"\n","\n","  features = []\n","  for (ex_index, example) in enumerate(examples):\n","    tokens_a = tokenizer.tokenize(example.text_a)\n","\n","    tokens_b = None\n","    if example.text_b:\n","      tokens_b = tokenizer.tokenize(example.text_b)\n","\n","    if tokens_b:\n","      # Modifies `tokens_a` and `tokens_b` in place so that the total\n","      # length is less than the specified length.\n","      # Account for [CLS], [SEP], [SEP] with \"- 3\"\n","      _truncate_seq_pair(tokens_a, tokens_b, seq_length - 3)\n","    else:\n","      # Account for [CLS] and [SEP] with \"- 2\"\n","      if len(tokens_a) > seq_length - 2:\n","        tokens_a = tokens_a[0:(seq_length - 2)]\n","\n","    # The convention in BERT is:\n","    # (a) For sequence pairs:\n","    #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n","    #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n","    # (b) For single sequences:\n","    #  tokens:   [CLS] the dog is hairy . [SEP]\n","    #  type_ids: 0     0   0   0  0     0 0\n","    #\n","    # Where \"type_ids\" are used to indicate whether this is the first\n","    # sequence or the second sequence. The embedding vectors for `type=0` and\n","    # `type=1` were learned during pre-training and are added to the wordpiece\n","    # embedding vector (and position vector). This is not *strictly* necessary\n","    # since the [SEP] token unambiguously separates the sequences, but it makes\n","    # it easier for the model to learn the concept of sequences.\n","    #\n","    # For classification tasks, the first vector (corresponding to [CLS]) is\n","    # used as as the \"sentence vector\". Note that this only makes sense because\n","    # the entire model is fine-tuned.\n","    tokens = []\n","    input_type_ids = []\n","    tokens.append(\"[CLS]\")\n","    input_type_ids.append(0)\n","    for token in tokens_a:\n","      tokens.append(token)\n","      input_type_ids.append(0)\n","    tokens.append(\"[SEP]\")\n","    input_type_ids.append(0)\n","\n","    if tokens_b:\n","      for token in tokens_b:\n","        tokens.append(token)\n","        input_type_ids.append(1)\n","      tokens.append(\"[SEP]\")\n","      input_type_ids.append(1)\n","\n","    input_ids = tokenizer.convert_tokens_to_ids(tokens)\n","\n","    # The mask has 1 for real tokens and 0 for padding tokens. Only real\n","    # tokens are attended to.\n","    input_mask = [1] * len(input_ids)\n","\n","    # Zero-pad up to the sequence length.\n","    while len(input_ids) < seq_length:\n","      input_ids.append(0)\n","      input_mask.append(0)\n","      input_type_ids.append(0)\n","\n","    assert len(input_ids) == seq_length\n","    assert len(input_mask) == seq_length\n","    assert len(input_type_ids) == seq_length\n","\n","    if ex_index < 5:\n","      tf.logging.info(\"*** Example ***\")\n","      tf.logging.info(\"unique_id: %s\" % (example.unique_id))\n","      tf.logging.info(\"tokens: %s\" % \" \".join(\n","          [tokenization.printable_text(x) for x in tokens]))\n","      tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n","      tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n","      tf.logging.info(\n","          \"input_type_ids: %s\" % \" \".join([str(x) for x in input_type_ids]))\n","\n","    features.append(\n","        InputFeatures(\n","            unique_id=example.unique_id,\n","            tokens=tokens,\n","            input_ids=input_ids,\n","            input_mask=input_mask,\n","            input_type_ids=input_type_ids))\n","  return features"],"execution_count":10,"outputs":[]},{"metadata":{"id":"8kv4oBpaJfKl","executionInfo":{"status":"ok","timestamp":1652383634866,"user_tz":300,"elapsed":305,"user":{"displayName":"Angie F","userId":"13982524409666626931"}}},"cell_type":"code","source":["def _truncate_seq_pair(tokens_a, tokens_b, max_length):\n","  \"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"\n","\n","  # This is a simple heuristic which will always truncate the longer sequence\n","  # one token at a time. This makes more sense than truncating an equal percent\n","  # of tokens from each, since if one sequence is very short then each token\n","  # that's truncated likely contains more information than a longer sequence.\n","  while True:\n","    total_length = len(tokens_a) + len(tokens_b)\n","    if total_length <= max_length:\n","      break\n","    if len(tokens_a) > len(tokens_b):\n","      tokens_a.pop()\n","    else:\n","      tokens_b.pop()"],"execution_count":11,"outputs":[]},{"metadata":{"id":"3ybhvF0hJhTO","executionInfo":{"status":"ok","timestamp":1652383635832,"user_tz":300,"elapsed":170,"user":{"displayName":"Angie F","userId":"13982524409666626931"}}},"cell_type":"code","source":["def read_sequence(input_sentences):\n","  examples = []\n","  unique_id = 0\n","  for sentence in input_sentences:\n","    line = tokenization.convert_to_unicode(sentence)\n","    examples.append(InputExample(unique_id=unique_id, text_a=line))\n","    unique_id += 1\n","  return examples\n","  "],"execution_count":12,"outputs":[]},{"metadata":{"id":"4kzMl3rQJjgV","executionInfo":{"status":"ok","timestamp":1652383637278,"user_tz":300,"elapsed":264,"user":{"displayName":"Angie F","userId":"13982524409666626931"}}},"cell_type":"code","source":["def get_features(input_text, dim=768):\n","#   tf.logging.set_verbosity(tf.logging.INFO)\n","\n","  layer_indexes = LAYERS\n","\n","  bert_config = modeling.BertConfig.from_json_file(BERT_CONFIG)\n","\n","  tokenizer = tokenization.FullTokenizer(\n","      vocab_file=VOCAB_FILE, do_lower_case=True)\n","\n","  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n","  tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(TPU_ADDRESS)\n","  run_config = tf.contrib.tpu.RunConfig(\n","      cluster=tpu_cluster_resolver,\n","      tpu_config=tf.contrib.tpu.TPUConfig(\n","          num_shards=NUM_TPU_CORES,\n","          per_host_input_for_training=is_per_host))\n","\n","  examples = read_sequence(input_text)\n","\n","  features = convert_examples_to_features(\n","      examples=examples, seq_length=MAX_SEQ_LENGTH, tokenizer=tokenizer)\n","\n","  unique_id_to_feature = {}\n","  for feature in features:\n","    unique_id_to_feature[feature.unique_id] = feature\n","\n","  model_fn = model_fn_builder(\n","      bert_config=bert_config,\n","      init_checkpoint=INIT_CHECKPOINT,\n","      layer_indexes=layer_indexes,\n","      use_tpu=True,\n","      use_one_hot_embeddings=True)\n","\n","  # If TPU is not available, this will fall back to normal Estimator on CPU\n","  # or GPU.\n","  estimator = tf.contrib.tpu.TPUEstimator(\n","      use_tpu=True,\n","      model_fn=model_fn,\n","      config=run_config,\n","      predict_batch_size=BATCH_SIZE,\n","      train_batch_size=BATCH_SIZE)\n","\n","  input_fn = input_fn_builder(\n","      features=features, seq_length=MAX_SEQ_LENGTH)\n","\n","  # Get features\n","  for result in estimator.predict(input_fn, yield_single_examples=True):\n","    unique_id = int(result[\"unique_id\"])\n","    feature = unique_id_to_feature[unique_id]\n","    output = collections.OrderedDict()\n","    for (i, token) in enumerate(feature.tokens):\n","      layers = []\n","      for (j, layer_index) in enumerate(layer_indexes):\n","        layer_output = result[\"layer_output_%d\" % j]\n","        layer_output_flat = np.array([x for x in layer_output[i:(i + 1)].flat])\n","        layers.append(layer_output_flat)\n","      output[token] = sum(layers)[:dim]\n","  \n","  return output"],"execution_count":13,"outputs":[]},{"metadata":{"id":"gJp9DY5WJmBv","outputId":"31a012d1-5891-4fdc-8579-1cc3a6503c5b","executionInfo":{"status":"error","timestamp":1652383648170,"user_tz":300,"elapsed":115,"user":{"displayName":"Angie F","userId":"13982524409666626931"}},"colab":{"base_uri":"https://localhost:8080/","height":328}},"cell_type":"code","source":["embeddings = get_features([\"This is a test\"])\n","print(embeddings)"],"execution_count":14,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-e85ad2033ce7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0membeddings\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"This is a test\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0membeddings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-13-d52bed505113>\u001b[0m in \u001b[0;36mget_features\u001b[0;34m(input_text, dim)\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mlayer_indexes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLAYERS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m   \u001b[0mbert_config\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodeling\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBertConfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_json_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBERT_CONFIG\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m   tokenizer = tokenization.FullTokenizer(\n","\u001b[0;32m/content/bert/modeling.py\u001b[0m in \u001b[0;36mfrom_json_file\u001b[0;34m(cls, json_file)\u001b[0m\n\u001b[1;32m     91\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mfrom_json_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjson_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m     \u001b[0;34m\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mreader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     94\u001b[0m       \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mreader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'tensorflow' has no attribute 'gfile'"]}]},{"metadata":{"id":"f66lsI4TmYno"},"cell_type":"code","source":[""],"execution_count":null,"outputs":[]}]}